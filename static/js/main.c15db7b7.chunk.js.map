{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","border","borderColor","className","style","id","type","Navbar","to","title","about","height","width","cursor","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","i","join","filter","element","defaultProps","Alert","alert","role","msg","App","Mode","setMode","setalert","message","setTimeout","removeBodyCls","document","body","classList","remove","cls","add","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.c15db7b7.chunk.js","sourcesContent":["// import React, {useState} from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setmyStyle] = useState(\r\n    //  {\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"white\",\r\n    // }\r\n    //     )\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'#042743',\r\n        backgroundColor: props.mode === 'dark'?'#042743':'white',\r\n        border: '1px solid',\r\n        borderColor: props.mode === 'dark'?'white':'#042743',\r\n    }\r\n    // const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    // let toggleStyle = ()=> {\r\n    //         if(myStyle.color === 'white'){\r\n    //             setmyStyle({\r\n    //                 color: \"black\",\r\n    //                 backgroundColor: \"white\",\r\n    //             })\r\n    //             setbtnText(\"Enable Dark Mode\")\r\n    //         }\r\n    //         else{\r\n    //             setmyStyle(\r\n    //                 {\r\n    //                     color: \"white\",\r\n    //                     backgroundColor: \"black\",\r\n    //                     border: '1px solid white'\r\n    //                 }\r\n    //             )\r\n    //             setbtnText(\"Enable Light Mode\")\r\n    //         }\r\n    //     }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle} >\r\n            <strong>Analyze your Text!</strong>\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n        Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\r\n\r\n\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n           <strong>Free to use + Features!</strong>\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n        TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n           <strong>Browser and Device compatible</strong>\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n        This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    \r\n    \r\n</div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n              </li>\r\n            </ul>\r\n            \r\n            <div className=\"d-flex\">\r\n                <div className=\"bg-primary rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('primary')}}></div>\r\n                <div className=\"bg-danger rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('danger')}}></div>\r\n                <div className=\"bg-success rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('success')}}></div>\r\n                <div className=\"bg-warning rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('warning')}}></div>\r\n            </div>\r\n\r\n           <div className=\"form-check form-switch my-1\">\r\n           <input className=\"form-check-input\" type=\"checkbox\" onClick={()=> {props.toggleMode(null)}} id=\"flexSwitchCheckDefault\"/>\r\n           <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n           </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n// Used just to avoid erros further in the project. (Tell which type of props to be accepted)\r\n//isRequired --> o that something is passed orelse it will show error.\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired,\r\n}\r\n\r\n//Normally i will pass props to this componenet but if i dont than pass these. \r\nNavbar.defaultProps={\r\n    title: \"Set title here\",\r\n    about: \"About\"\r\n}\r\n\r\n//When we are passing things(variables), into a componenet we do it through props. We pass props in the function and call the particular properties by props.property1\r\n\r\n\r\n// `  ` -> this is a template lietral. You can use JS by $ sign to use nay variable\r\n\r\n//onClik needs a function, not a function call, so we put an arrow function in it","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick= ()=> {\r\n        // console.log(\"clicked\" + text);\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Coverted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const handleLoClick= ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to LowerCase\", \"success\")\r\n    }\r\n\r\n    const handleClClick= ()=> {\r\n        let newText = '';\r\n        setText(newText)\r\n    }\r\n\r\n    const handleAlClick=()=>{\r\n        let newText = text.toLowerCase().split(''); //convert all to an array\r\n\r\n        for (var i=0; i<= newText.length-1; i+=2){\r\n        newText[i]= newText[i].toUpperCase();\r\n        }\r\n        newText = newText.join('') //join() method helps to convert the elemnets of an array into a string. In brackets we hv(seprator)\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event)=> {\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value) //Here we are updating the state of the text to the most recent.\r\n    }\r\n\r\n\r\n    const [text, setText] = useState(''); //deafult value will be a blank string\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1 className=\"mb-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"myBox\" value={text} style={{backgroundColor: props.mode==='light'?'white':'#13466e', color: props.mode==='dark'?'white':'black'}} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div> \r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleAlClick}>AlTeRnAtInG CaSe</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClClick}>Clear</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Text Preview</h2>\r\n            <p>{text.length>0? text: 'Enter something in the text to preview it here'}</p>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//text.split(\" \")--> split the text where there is a gap and return an array\r\n//.filter()--> takes a function and if it comes true than returns it values to the array.\r\n\r\n\r\n\r\n// State is the current status of the componenet saved in sort of a variabel\r\n\r\n//here text is a variable. whenever we update the text variable we just cannot assign things to it. We need to use function to update text. We use settext\r\n\r\n// Enter Text here, is the default value of the text variable\r\n// The setText is changing the default text(that is the previous state of the text), once the function is called after clicking the button\r\n//This seText is a function which we can use anytime to update the \"text\" varaible. Its changing the value(which is equal to text) on the text area everytime the setText func is used\r\n\r\n//If value is present we need to mention onChnage(once we chnage anything, by starting to write anything) also as if we need to write in the text area <--The value needs to get updated, once we start writing something-->\r\n//The onChnage function will be called everytime we write some letters in the text area as we are changing something\r\n\r\n// In onChnage as we listen we need to pass event object\r\n\r\n\r\n //text =\"new text\"// wrong way to chnage the state text.\r\n    //setText(\"new text\"); //Cprrect way to change the state","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n       { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n       \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n  } from \"react-router-dom\";\n\nfunction App() {\n\n  const [Mode, setMode] = useState('light'); //whether darkmode is enabled or node  \n  const [alert, setalert] = useState(null)\n\n  const showAlert= (message, type)=>{\n        setalert({\n            msg: message,\n            type: type,\n        })\n        setTimeout(() => {\n            setalert(null);\n        }, 1500);  //to dissapear the alert after 1.5 seconds\n  }\n\n  const removeBodyCls=()=>{\n        document.body.classList.remove('bg-light')\n        document.body.classList.remove('bg-danger')\n        document.body.classList.remove('bg-warning')\n        document.body.classList.remove('bg-success')\n        document.body.classList.remove('bg-dark')\n        document.body.classList.remove('bg-primary')\n  }\n  const toggleMode = (cls)=> {\n      removeBodyCls();\n\n      document.body.classList.add('bg-'+ cls)\n      if(cls=== null){\n        removeBodyCls();\n      if(Mode === 'light'){\n          setMode('dark');\n          document.body.style.backgroundColor = '#042743';\n          showAlert(\"Dark mode has been enabled\", \"success\")\n        //For fun\n        //   setInterval(() => {\n        //       document.title = \"TetxtUtils in Dark Mode\"\n        //   }, 2000);\n        //   setInterval(() => {\n        //     document.title = \"TetxtUtils is amazing\"\n        //   }, 1500);\n\n      }\n      else{\n        setMode('light')\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"Light mode has been enabled\", \"success\")\n      }\n  }}\n  return (\n    <> \n    <Router>\n    <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Switch>\n          <Route exact path=\"/about\">\n            <About mode={Mode}/>\n          </Route>\n          \n          <Route exact path=\"\">\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={Mode}/>\n          </Route>\n        </Switch>\n        \n        \n    </div>\n    </Router>\n    </>\n  );\n\n}\n\nexport default App;\n\n\n//<>  </>  -> This is JSX Fragment, it allows multiple HTML elements inside the return\n\n//Weherver we need to use JS, we will use curly braces { }\n\n//While writing components or img element we need a closing tag like />. Any element which doesnt have a closing tag needs /> this in tje end.\n\n//Default Export-->when using \"export default App;\", with whatever name we import form app js this deafualt app function will be returned.\n\n//Named Export --> needs to the name the thing which needs to be imported like \"export {a}\"\n\n//container class is a bootstrap class which brings the elements in the div to the centere and in proper manner\n\n// always a good habit to write \"exact path\" in react router.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n     <HashRouter basename='/'> \n    <App />\n    </HashRouter> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}