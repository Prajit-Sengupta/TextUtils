{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","height","width","cursor","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","color","heading","value","backgroundColor","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","i","join","filter","element","defaultProps","about","Alert","alert","role","msg","App","Mode","setMode","setalert","message","setTimeout","removeBodyCls","document","body","classList","remove","cls","add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a806270.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n              </li> */}\r\n            </ul>\r\n            \r\n            <div className=\"d-flex\">\r\n                <div className=\"bg-primary rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('primary')}}></div>\r\n                <div className=\"bg-danger rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('danger')}}></div>\r\n                <div className=\"bg-success rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('success')}}></div>\r\n                <div className=\"bg-warning rounded mx-2\" style={{height: \"20px\" , width: \"20px\", cursor: 'pointer'}} onClick={()=> {props.toggleMode('warning')}}></div>\r\n            </div>\r\n\r\n           <div className=\"form-check form-switch my-1\">\r\n           <input className=\"form-check-input\" type=\"checkbox\" onClick={()=> {props.toggleMode(null)}} id=\"flexSwitchCheckDefault\"/>\r\n           <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n           </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n// Used just to avoid erros further in the project. (Tell which type of props to be accepted)\r\n//isRequired --> o that something is passed orelse it will show error.\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired,\r\n}\r\n\r\n//Normally i will pass props to this componenet but if i dont than pass these. \r\nNavbar.defaultProps={\r\n    title: \"Set title here\",\r\n    about: \"About\"\r\n}\r\n\r\n//When we are passing things(variables), into a componenet we do it through props. We pass props in the function and call the particular properties by props.property1\r\n\r\n\r\n// `  ` -> this is a template lietral. You can use JS by $ sign to use nay variable\r\n\r\n//onClik needs a function, not a function call, so we put an arrow function in it","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick= ()=> {\r\n        // console.log(\"clicked\" + text);\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Coverted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const handleLoClick= ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to LowerCase\", \"success\")\r\n    }\r\n\r\n    const handleClClick= ()=> {\r\n        let newText = '';\r\n        setText(newText)\r\n    }\r\n\r\n    const handleAlClick=()=>{\r\n        let newText = text.toLowerCase().split(''); //convert all to an array\r\n\r\n        for (var i=0; i<= newText.length-1; i+=2){\r\n        newText[i]= newText[i].toUpperCase();\r\n        }\r\n        newText = newText.join('') //join() method helps to convert the elemnets of an array into a string. In brackets we hv(seprator)\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event)=> {\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value) //Here we are updating the state of the text to the most recent.\r\n    }\r\n\r\n\r\n    const [text, setText] = useState(''); //deafult value will be a blank string\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1 className=\"mb-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"myBox\" value={text} style={{backgroundColor: props.mode==='light'?'white':'#13466e', color: props.mode==='dark'?'white':'black'}} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div> \r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleAlClick}>AlTeRnAtInG CaSe</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClClick}>Clear</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Text Preview</h2>\r\n            <p>{text.length>0? text: 'Enter something in the text to preview it here'}</p>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//text.split(\" \")--> split the text where there is a gap and return an array\r\n//.filter()--> takes a function and if it comes true than returns it values to the array.\r\n\r\n\r\n\r\n// State is the current status of the componenet saved in sort of a variabel\r\n\r\n//here text is a variable. whenever we update the text variable we just cannot assign things to it. We need to use function to update text. We use settext\r\n\r\n// Enter Text here, is the default value of the text variable\r\n// The setText is changing the default text(that is the previous state of the text), once the function is called after clicking the button\r\n//This seText is a function which we can use anytime to update the \"text\" varaible. Its changing the value(which is equal to text) on the text area everytime the setText func is used\r\n\r\n//If value is present we need to mention onChnage(once we chnage anything, by starting to write anything) also as if we need to write in the text area <--The value needs to get updated, once we start writing something-->\r\n//The onChnage function will be called everytime we write some letters in the text area as we are changing something\r\n\r\n// In onChnage as we listen we need to pass event object\r\n\r\n\r\n //text =\"new text\"// wrong way to chnage the state text.\r\n    //setText(\"new text\"); //Cprrect way to change the state","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n       { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n       \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//   } from \"react-router-dom\";\n\nfunction App() {\n\n  const [Mode, setMode] = useState('light'); //whether darkmode is enabled or node  \n  const [alert, setalert] = useState(null)\n\n  const showAlert= (message, type)=>{\n        setalert({\n            msg: message,\n            type: type,\n        })\n        setTimeout(() => {\n            setalert(null);\n        }, 1500);  //to dissapear the alert after 1.5 seconds\n  }\n\n  const removeBodyCls=()=>{\n        document.body.classList.remove('bg-light')\n        document.body.classList.remove('bg-danger')\n        document.body.classList.remove('bg-warning')\n        document.body.classList.remove('bg-success')\n        document.body.classList.remove('bg-dark')\n        document.body.classList.remove('bg-primary')\n  }\n  const toggleMode = (cls)=> {\n      removeBodyCls();\n      \n      document.body.classList.add('bg-'+ cls)\n      if(cls=== null){\n        removeBodyCls();\n      if(Mode === 'light'){\n          setMode('dark');\n          document.body.style.backgroundColor = '#042743';\n          showAlert(\"Dark mode has been enabled\", \"success\")\n        //For fun\n        //   setInterval(() => {\n        //       document.title = \"TetxtUtils in Dark Mode\"\n        //   }, 2000);\n        //   setInterval(() => {\n        //     document.title = \"TetxtUtils is amazing\"\n        //   }, 1500);\n\n      }\n      else{\n        setMode('light')\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"Light mode has been enabled\", \"success\")\n      }\n  }}\n  return (\n    <> \n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode={Mode}/>\n          </Route>\n          \n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={Mode}/>\n          {/* </Route>\n        </Switch> */}\n        \n        \n    </div>\n    {/* </Router> */}\n    </>\n  );\n\n}\n\nexport default App;\n\n\n//<>  </>  -> This is JSX Fragment, it allows multiple HTML elements inside the return\n\n//Weherver we need to use JS, we will use curly braces { }\n\n//While writing components or img element we need a closing tag like />. Any element which doesnt have a closing tag needs /> this in tje end.\n\n//Default Export-->when using \"export default App;\", with whatever name we import form app js this deafualt app function will be returned.\n\n//Named Export --> needs to the name the thing which needs to be imported like \"export {a}\"\n\n//container class is a bootstrap class which brings the elements in the div to the centere and in proper manner\n\n// always a good habit to write \"exact path\" in react router.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}